import 'dart:convert';
import 'dart:io';

import 'package:flutter_test/flutter_test.dart';

import '../lib/bitbox.dart' as Bitbox;

// These tests generate a bunch of keys, addresses and compare them to the testing data generated by the original bitbox
// If there are balances on the addresses, the tests retrieve utxos, compile testing spending transactions,
// and optionally broadcast the transactions
//
// Make sure to run create_test_data.js first to generate the test data.
void main() {

  test('Generating addresses from WIF on testnet', () {
    final legacyAddress = Bitbox.ECPair.fromWIF("92pMamV6jNyEq9pDpY4f6nBy9KpV2cfJT4L5zDUYiGqyQHJfF1K").address;
    expect(legacyAddress, "mjNkq5ycsAfY9Vybo9jG8wbkC5mbpo4xgC");

    final cashAddress = Bitbox.Address.toCashAddress(legacyAddress);
    expect(cashAddress, "bchtest:qq498xkl67h0espwqxttfn8hdt4g3g05wqtqeyg993");

    final slpAddress = Bitbox.Address.toSLPAddress(legacyAddress);
    expect(slpAddress, "slptest:qq498xkl67h0espwqxttfn8hdt4g3g05wqs57ljjhv");
  });

  test('Generating addresses from WIF on mainnet', () {
    final legacyAddress = Bitbox.ECPair.fromWIF("5K6EwEiKWKNnWGYwbNtrXjA8KKNntvxNKvepNqNeeLpfW7FSG1v").address;
    expect(legacyAddress, "1AC4gh14wwZPULVPCdxUkgqbtPvC92PQPN");

    final cashAddress = Bitbox.Address.toCashAddress(legacyAddress);
    expect(cashAddress, "bitcoincash:qpjdpjrm5zvp2al5u4uzmp36t9m0ll7gd525rss978");

    final slpAddress = Bitbox.Address.toSLPAddress(legacyAddress);
    expect(slpAddress, "simpleledger:qpjdpjrm5zvp2al5u4uzmp36t9m0ll7gd5x0gt99qe");
  });
}
